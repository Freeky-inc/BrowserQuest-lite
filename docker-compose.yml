version: '3.8'

services:
  server1:
    build:
      context: .
      dockerfile: server/Dockerfile.server
    container_name: server1
    expose:
      - "8000"
    volumes:
      - .:/server
    working_dir: /server
    command: node server/js/main.js
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s


  server2:
    build:
      context: .
      dockerfile: server/Dockerfile.server
    container_name: server2
    expose:
      - "8000"
    volumes:
      - .:/server
    working_dir: /server
    command: node server/js/main.js
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s


  server3:
    build:
      context: .
      dockerfile: server/Dockerfile.server
    container_name: server3
    expose:
      - "8000"
    volumes:
      - .:/server
    working_dir: /server
    command: node server/js/main.js
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  server4:
    build:
      context: .
      dockerfile: server/Dockerfile.server
    container_name: server4
    expose:
      - "8000"
    volumes:
      - .:/server
    working_dir: /server
    command: node server/js/main.js
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  server5:
    build:
      context: .
      dockerfile: server/Dockerfile.server
    container_name: server5
    expose:
      - "8000"
    volumes:
      - .:/server
    working_dir: /server
    command: node server/js/main.js
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  client:
    build:
      context: .
      dockerfile: client/Dockerfile.client
    container_name: client
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app  # Montage du code source pour le hot-reload
    environment:
      - NODE_ENV=development
    command: sh -c "npm install && http-server -p 3000 --proxy http://localhost:3000?"

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "8000:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      server1:
        condition: service_healthy
      server2:
        condition: service_healthy
      server3:
        condition: service_healthy
      server4:
        condition: service_healthy
      server5:
        condition: service_healthy
      client:
        condition: service_healthy
